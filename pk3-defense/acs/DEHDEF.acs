#library "DEHDEF"
#include "zcommon.acs"

#define DEH_NUM_CLASSES 10

#define DEH_SLOT_CHAINSAW 0
#define DEH_SLOT_SHOTGUN 1
#define DEH_SLOT_SSG 2
#define DEH_SLOT_CHAINGUN 3
#define DEH_SLOT_ROCKET 4
#define DEH_SLOT_PLASMA 5
#define DEH_SLOT_BFG 6

#define DEH_DOOM 0
#define DEH_STRAIN 1
#define DEH_DEUS_VULT 2
#define DEH_VALIANT 3
#define DEH_MASKIMXUL 4
#define DEH_STRUGGLE 5
#define DEH_RELIQUARY 6
#define DEH_NEGATIVEONE 7
#define DEH_ROWDYRUDY 8
#define DEH_RAYMOHAWK 9

#define DEH_AMMO_CLIP 0
#define DEH_AMMO_SHELL 1
#define DEH_AMMO_ROCKET 2
#define DEH_AMMO_CELL 3

int DehackedDefenseWeapons[DEH_NUM_CLASSES][7] = 
{
	//Doom
	{"DEHChainsaw", "DEHShotgun", "DEHSuperShotgun", "DEHChaingun", "DEHRocketLauncher", "DEHPlasmaRifle", "DEHBFG9000"},
	//STRAIN
	{"DEHChainsaw", "StrainSawedOff", "DEHSuperShotgun", "DEHChaingun", "DEHRocketLauncher", "StrainNFG", "StrainPsychicBlaster"},
	//DV2
	{"DV2Gauntlets", "DEHShotgun", "DEHSuperShotgun", "DEHChaingun", "DEHRocketLauncher", "DEHPlasmaRifle", "DEHBFG9000"},
	//Valiant
	{"DEHChainsaw", "DEHShotgun", "DEHSuperShotgun", "ValiantChaingun", "DEHRocketLauncher", "DEHPlasmaRifle", "DEHBFG9000"},
	//Maskim Xul
	{"DEHChainsaw", "DEHShotgun", "DEHSuperShotgun", "DEHChaingun", "MaskimXulHandOfAfrit", "MaskimXulJackBombs", "MaskimXulGrimoireExcidium"},
	//Stuggle
	{"StruggleDrillMachine", "StruggleShotgun", "DEHSuperShotgun", "StruggleDualPistols", "StruggleGrenadeLauncher", "StruggleAssaultRifle", "StruggleLeichenfaust"},
	//Antaresian Reliquary
	{"ReliquaryChainsaw", "ReliquaryShotgun", "ReliquarySuperShotgun", "ReliquaryChaingun", "ReliquaryRocketLauncher", "ReliquaryPlasmaRifle", "ReliquaryBFG9000"},
	//Negative One
	{"NegativeOneGauntlets", "NegativeOneShotgun", "NegativeOneSuperShotgun", "NegativeOneUzi", "NegativeOneRocketLauncher", "NegativeOneDarkSceptre", "NegativeOneUnmakyrFake"},
	//Rowdy Rudy
	{"RowdyRudyChainsaw", "RowdyRudyShotgun", "RowdyRudySuperShotgun", "RowdyRudyChaingun", "RowdyRudyRocketLauncher", "DEHPlasmaRifle", "RowdyRudyBFG9000"},
	//Ray Mohawk
	{"RayMohawkGauntlets", "RayMohawkShotgun", "RayMohawkSuperShotgun", "RayMohawkBlaster", "RayMohawkFlamethrower", "RayMohawkCellCannon", "RayMohawkBFG9002"}
};
int DehackedDefenseAmmoTypes[DEH_NUM_CLASSES][7] = 
{
	{"", "Shell", "Shell", "Clip", "RocketAmmo", "Cell", "Cell"},
	{"", "Shell", "Shell", "Clip", "RocketAmmo", "NFGBattery", "RocketAmmo"},
	{"", "Shell", "Shell", "Clip", "RocketAmmo", "Cell", "Cell"},
	{"", "Shell", "Shell", "Clip", "RocketAmmo", "Cell", "Cell"},
	{"", "Shell", "Shell", "Clip", "RocketAmmo", "JackBombAmmo", "Health"}, //?!
	{"", "Shell", "Shell", "Clip", "RocketAmmo", "223CaliberMagazine", "RocketAmmo"},
	{"", "Shell", "Shell", "Clip", "RocketAmmo", "Cell", "Cell"},
	{"", "Shell", "Shell", "Clip", "RocketAmmo", "Cell", "Cell"},
	{"", "Shell", "Shell", "Clip", "RocketAmmo", "Cell", "Cell"},
	{"", "Shell", "Shell", "Clip", "RayMohawkFuel", "Cell", "Cell"}
};
int DehackedDefensePickupSize[DEH_NUM_CLASSES][7] = 
{
	{0, 4, 4, 10, 1, 20, 20},
	{0, 4, 4, 10, 1, 6,  1},
	{0, 4, 4, 10, 1, 20, 20},
	{0, 4, 4, 15, 1, 20, 20},
	{0, 4, 4, 10, 1, 1,  20},
	{0, 2, 2, 12, 1, 20, 1},
	{0, 4, 4, 12, 1, 16, 16},
	{0, 4, 4, 10, 1, 20, 20},
	{0, 4, 4, 10, 1, 20, 20},
	{0, 6, 6, 10, 10, 20, 20}
};
int DehackedDefenseMaxAmmo[DEH_NUM_CLASSES][4] =
{
	{200, 50, 50, 300},
	{200, 50, 50, 300},
	{200, 50, 50, 300},
	{300, 50, 50, 300},
	{200, 50, 50, 300},
	{180, 36, 18, 300},
	{240, 40, 40, 240},
	{200, 50, 50, 300},
	{200, 50, 50, 300},
	{150, 150, 50, 200}
};

int DehackedDefenseClasses[DEH_NUM_CLASSES] =
{
	"JohnDoom", "JohnStrain", "JohnDeusVultII", "JohnValiant", "JohnMaskimXul", "JohnStruggle", "JohnReliquary", "JohnNegativeOne", "RowdyRudy", "RayMohawk"
};

Script "Dehacked_Defense_Enter" ENTER
{
	int class;
	for(int i = 0; i < DEH_NUM_CLASSES; i++)
	{
		if(GetActorClass(0) == DehackedDefenseClasses[i])
		{
			class = i;
		}
	}

	if(CheckInventory("DummyBackpackItem") || CheckInventory("BackpackItem"))
	{
		SetAmmoCapacity("Clip", DehackedDefenseMaxAmmo[class][DEH_AMMO_CLIP] * 2);
		SetAmmoCapacity("Shell", DehackedDefenseMaxAmmo[class][DEH_AMMO_SHELL] * 2);
		SetAmmoCapacity("RocketAmmo", DehackedDefenseMaxAmmo[class][DEH_AMMO_ROCKET] * 2);
		SetAmmoCapacity("Cell", DehackedDefenseMaxAmmo[class][DEH_AMMO_CELL] * 2);
		SetAmmoCapacity("NFGBattery", 200);
		SetAmmoCapacity("JackBombAmmo", 20);
		SetAmmoCapacity("223CaliberMagazine", 320);
		SetAmmoCapacity("RayMohawkFuel", 500);
	} else {
		SetAmmoCapacity("Clip", DehackedDefenseMaxAmmo[class][DEH_AMMO_CLIP]);
		SetAmmoCapacity("Shell", DehackedDefenseMaxAmmo[class][DEH_AMMO_SHELL]);
		SetAmmoCapacity("RocketAmmo", DehackedDefenseMaxAmmo[class][DEH_AMMO_ROCKET]);
		SetAmmoCapacity("Cell", DehackedDefenseMaxAmmo[class][DEH_AMMO_CELL]);
		SetAmmoCapacity("NFGBattery", 100);
		SetAmmoCapacity("JackBombAmmo", 10);
		SetAmmoCapacity("223CaliberMagazine", 160);
		SetAmmoCapacity("RayMohawkFuel", 250);
	}
	//And now all of the start settings, this giant mess
	if((GetCVar("sv_shotgunstart") > 0 || GetCVar("deh_def_shotgunstart") > 0) && !CheckInventory("DEHShotgun") && !CheckInventory("StrainSawedOff") && !CheckInventory("StruggleShotgun") && !CheckInventory("ReliquaryShotgun"))
	{
		TakeInventory("Shotgun", 1);
		TakeInventory("Shell", 50);
		GiveInventory(DehackedDefenseWeapons[class][DEH_SLOT_SHOTGUN], 1);
		GiveInventory(DehackedDefenseAmmoTypes[class][DEH_SLOT_SHOTGUN], DehackedDefensePickupSize[class][DEH_SLOT_SHOTGUN] * 3);
	}
	if(GetCVar("deh_def_chainsawstart") > 0 && !CheckInventory("DEHChainsaw") && !CheckInventory("DV2Gauntlets") && !CheckInventory("StruggleDrillMachine") && !CheckInventory("ReliquaryChainsaw"))
	{
		GiveInventory(DehackedDefenseWeapons[class][DEH_SLOT_CHAINSAW], 1);
	}
	if(GetCVar("deh_def_supershotgunstart") > 0 && !CheckInventory("DEHSuperShotgun") && !CheckInventory("StruggleSuperShotgun") && !CheckInventory("ReliquarySuperShotgun"))
	{
		GiveInventory(DehackedDefenseWeapons[class][DEH_SLOT_SSG], 1);
		GiveInventory(DehackedDefenseAmmoTypes[class][DEH_SLOT_SSG], DehackedDefensePickupSize[class][DEH_SLOT_SSG] * 3);
	}
	if(GetCVar("deh_def_chaingunstart") > 0 && !CheckInventory("DEHChaingun") && !CheckInventory("ValiantChaingun") && !CheckInventory("StruggleDualPistols") && !CheckInventory("ReliquaryChaingun"))
	{
		GiveInventory(DehackedDefenseWeapons[class][DEH_SLOT_CHAINGUN], 1);
		GiveInventory(DehackedDefenseAmmoTypes[class][DEH_SLOT_CHAINGUN], DehackedDefensePickupSize[class][DEH_SLOT_CHAINGUN] * 3);
	}
	if(GetCVar("deh_def_rocketlauncherstart") > 0 && !CheckInventory("DEHRocketLauncher") && !CheckInventory("MaskimXulHandOfAfrit") && !CheckInventory("StruggleGrenadeLauncher") && !CheckInventory("ReliquaryRocketLauncher"))
	{
		GiveInventory(DehackedDefenseWeapons[class][DEH_SLOT_ROCKET], 1);
		GiveInventory(DehackedDefenseAmmoTypes[class][DEH_SLOT_ROCKET], DehackedDefensePickupSize[class][DEH_SLOT_ROCKET] * 3);
	}
	if(GetCVar("deh_def_plasmariflestart") > 0 && !CheckInventory("DEHPlasmaRifle") && !CheckInventory("StrainNFG") && !CheckInventory("MaskimXulJackBombs") && !CheckInventory("StruggleAssaultRifle") && !CheckInventory("ReliquaryPlasmaRifle"))
	{
		GiveInventory(DehackedDefenseWeapons[class][DEH_SLOT_PLASMA], 1);
		GiveInventory(DehackedDefenseAmmoTypes[class][DEH_SLOT_PLASMA], DehackedDefensePickupSize[class][DEH_SLOT_PLASMA] * 2);
	}
	if(GetCVar("deh_def_bfg9000start") > 0 && !CheckInventory("DEHBFG9000") && !CheckInventory("StrainPsychicBlaster") && !CheckInventory("MaskimXulGrimoireExcidium") && !CheckInventory("StruggleLeichenfaust") && !CheckInventory("ReliquaryBFG9000"))
	{
		GiveInventory(DehackedDefenseWeapons[class][DEH_SLOT_BFG], 1);
		GiveInventory(DehackedDefenseAmmoTypes[class][DEH_SLOT_BFG], DehackedDefensePickupSize[class][DEH_SLOT_BFG] * 4);
	}
	//Whew. Now for health, armor, and powerups, which thankfully aren't determined by class, so:
	if(GetCVar("deh_def_starthealth") > 0)
	{
		SetActorProperty(0, APROP_Health, GetCVar("deh_def_starthealth") * 100);
	}
	if(GetCVar("deh_def_startarmor") == 1)
	{
		TakeInventory("Armor", 0x7FFFFFFF);
		GiveInventory("GreenArmor", 1);
	}
	else if(GetCVar("deh_def_startarmor") == 2)
	{
		TakeInventory("Armor", 0x7FFFFFFF);
		GiveInventory("DEHBlueArmor", 1);
	}
	else if(GetCVar("deh_def_startarmor") == 3)
	{
		TakeInventory("Armor", 0x7FFFFFFF);
		GiveInventory("StrainRedArmor", 1);
	}
	
	if(GetCVar("deh_def_backpackstart") > 0)
	{
		for(int j = 0; j < GetCVar("deh_def_backpackstart"); j++)
		{
			ACS_NamedExecuteAlways("Dehacked_BackpackHandler", 0);
		}
	}
	if(GetCVar("deh_def_berserkstart") > 0)
	{
		GiveInventory("Berserk", 1);
	}
	if(GetCVar("deh_def_invulnstart") > 0)
	{
		GiveInventory("InvulnerabilitySphere", 1);
	}
	if(GetCVar("deh_def_invisstart") > 0)
	{
		GiveInventory("BlurSphere", 1);
	}
}

Script "Dehacked_BackpackHandler" (void)
{
	int class;
	for(int i = 0; i < DEH_NUM_CLASSES; i++)
	{
		if(GetActorClass(0) == DehackedDefenseClasses[i])
		{
			class = i;
		}
	}
	GiveInventory("DummyBackpackItem", 1);
	SetAmmoCapacity("Clip", DehackedDefenseMaxAmmo[class][DEH_AMMO_CLIP] * 2);
	SetAmmoCapacity("Shell", DehackedDefenseMaxAmmo[class][DEH_AMMO_SHELL] * 2);
	SetAmmoCapacity("RocketAmmo", DehackedDefenseMaxAmmo[class][DEH_AMMO_ROCKET] * 2);
	SetAmmoCapacity("Cell", DehackedDefenseMaxAmmo[class][DEH_AMMO_CELL] * 2);
	SetAmmoCapacity("NFGBattery", 200);
	SetAmmoCapacity("JackBombAmmo", 20);
	SetAmmoCapacity("223CaliberMagazine", 320);
	SetAmmoCapacity("RayMohawkFuel", 500);
	GiveInventory(DehackedDefenseAmmoTypes[class][DEH_SLOT_CHAINGUN], DehackedDefensePickupSize[class][DEH_SLOT_CHAINGUN]);
	GiveInventory(DehackedDefenseAmmoTypes[class][DEH_SLOT_SHOTGUN], DehackedDefensePickupSize[class][DEH_SLOT_SHOTGUN]);
	GiveInventory(DehackedDefenseAmmoTypes[class][DEH_SLOT_ROCKET], DehackedDefensePickupSize[class][DEH_SLOT_ROCKET]);
	if(GetActorClass(0) == "JohnReliquary")
	{
		GiveInventory("Cell", 16);
	}
	else //Just Vanilla Ammo
	{
		GiveInventory("Cell", 20);
	}
	GiveInventory("NFGBattery", 6);
	GiveInventory("JackBombAmmo", 1);
	GiveInventory("223CaliberMagazine", 20);
	GiveInventory("RayMohawkFuel", 10);
}

Script "Dehacked_WeaponReset" (int mapset, int tierLevel)
{
	bool keep_spawn = TRUE;

	switch(mapset)
	{
	default:
		break;
	case DEH_STRAIN:
		keep_spawn = GetCVar("deh_def_enable_strain");
		break;
	case DEH_DEUS_VULT:
		keep_spawn = GetCVar("deh_def_enable_deusvult2");
		break;
	case DEH_VALIANT:
		keep_spawn = GetCVar("deh_def_enable_valiant");
		break;
	case DEH_MASKIMXUL:
		keep_spawn = GetCVar("deh_def_enable_maskimxul");
		break;
	case DEH_STRUGGLE:
		keep_spawn = GetCVar("deh_def_enable_struggle");
		break;
	case DEH_RELIQUARY:
		keep_spawn = GetCVar("deh_def_enable_reliquary");
		break;
	case DEH_NEGATIVEONE:
		keep_spawn = GetCVar("deh_def_enable_negativeone");
		break;
	case DEH_ROWDYRUDY:
		keep_spawn = GetCVar("deh_def_enable_rowdyrudy");
		break;
	case DEH_RAYMOHAWK:
		keep_spawn = GetCVar("deh_def_enable_raymohawk");
		break;
	}
	if(GetCVar("deh_def_level_scaling") && GetLevelInfo(LEVELINFO_LEVELNUM) < tierLevel)
	{
		keep_spawn = FALSE;
	}
	
	if(keep_spawn)
	{
		SetResultValue(0); //Keep the spawn
	} else {
		SetResultValue(1); //Reset
	}
}

Script "Dehacked_WeaponSpawn" (int class, int slot)
{
	int x = GetActorX(0);
	int y = GetActorY(0);
	int z = GetActorZ(0);
	int a = GetActorAngle(0) >> 8;
	SpawnForced(DehackedDefenseWeapons[class][slot], x, y, z, 573, a);
	SetActorProperty(573, APROP_Dropped, FALSE);
}

Script "Dehacked_MapNumber" (void)
{
	int x = GetLevelInfo(LEVELINFO_LEVELNUM);
	SetResultValue(x);
}
Script "Dehacked_RandomizerCheck" (void)
{
	int x = GetCVar("deh_def_randomizer");
	SetResultValue(x);
}
Script "Dehacked_LevelScaling" (void)
{
	int x = GetCVar("deh_def_level_scaling");
	SetResultValue(x);
}
Script "Dehacked_PistolCheck" (void)
{
	int x = GetCVar("deh_def_spawn_pistols");
	SetResultValue(x);
}
Script "Dehacked_WeaponStay" (void)
{
	int x = GetCVar("sv_weaponstay");
	SetResultValue(x);
}
Script "Dehacked_BalancedMode" (void)
{
	int x = GetCVar("deh_def_balanace_weaps");
	SetResultValue(x);
}
Script "Dehacked_MergeAmmoCheck" (void)
{
	int x = GetCVar("deh_def_merge_ammo");
	SetResultValue(x);
}

Script "Dehacked_DemonKeyFinalCheck" (void)
{
	bool GiveKeys = FALSE;

	int a = ThingCountName("DEHGridlockCardinalSpawner", 0);
	int b = ThingCountName("DEHArchangelusSpawner", 0);
	int c = ThingCountName("DEHTheInquisitorSpawner", 0);
	int d = ThingCountName("DEHBubbleShipSpawner", 0);
	int check = a + b + c + d;
	if(check > 0)
	{
		GiveKeys = TRUE;
	}
	
	a = ThingCountName("BossEye", 0);
	b = ThingCountName("DEHBossEye", 0);
	c = ThingCountName("DEHFinalBossSpawner", 0);
	d = ThingCountName("Robot_BossEye", 0); //Rampancy Compatibility
	check = a + b + c + d;
	if(check >= 4)
	{
		GiveKeys = TRUE;
	}
	
	if(GiveKeys)
	{
		SetResultValue(1);
	} else {
		SetResultValue(0);
	}
}